function output = generateFibnetResult(x,ctrl,netgen,fibnet,paramName)

% Now wrap a loop around it!


% Generate network/check that network exists
generateNetworks(netgen,ctrl)

% Construct input file
constructSolverInput(x,fibnet,ctrl,paramName)

% Solver call
% Specify ANSYS call according to your installation
ansysExecPath = '"C:\Program Files\ANSYS Inc\v150\ansys\bin\winx64\ANSYS150.exe"';
ansysLic      = '-p aa_t_a';
ansysNP       = '-np 1';
ansysMisc     = '-s read -l en-us -b';
ansysJobname  = ['-j "' ctrl.simName '"'];
ansysRunDir   = ['-dir "' ctrl.runDir '"'];
ansysInput    = ['-i "' ctrl.runDir filesep ctrl.simName '.dat"'];
ansysOutput   = ['-o "' ctrl.runDir filesep ctrl.simName '.out"'];

if isempty(ctrl.customExecutable)
    ansysCustom = '';
else
    ansysCustom   = ['-custom "' ctrl.customExecutable '"'];
end
submitLine = strjoin({ansysExecPath , ansysLic , ansysNP , ansysMisc , ansysJobname , ansysRunDir , ansysInput , ansysOutput ansysCustom},' ');


system(submitLine);


% Import output
importedREA = importfile_REA([ctrl.runDir filesep ctrl.simName '.rea']);


% Calculate the elastic modulus
selIdxTS = [1 size(importedREA,1)];
output   = 1e-6*diff(0.5*(importedREA(selIdxTS,2)+importedREA(selIdxTS,3)))./ ...
               (diff(importedREA(selIdxTS,1))/100*fibnet.width*1e-6*netgen.thickness*1e-6);



disp('ok')
% Run input file

% Import result




